# SCons build script for Protocol Analyzer Validator (pav) Unit Tests

from os import walk
from os.path import basename, splitext, isfile, join
import fnmatch

Import('ut_env')

# Source has to be rebuilt with symbols / arcs / etc
ut_src = ut_env.Glob("tests/*.cpp")



ut_pav_objs = []
for root, dirnames, filenames in walk("src"):
    for filename in fnmatch.filter(filenames, '*.c'):
        if (filename != 'pav.c'):
            name, ext = splitext(basename(filename))
            src = File(filename)
            ut_pav_objs.extend(ut_env.SharedObject(name, src))

# Create actual unit test binaries
ut_bins = []
for root, dirnames, filenames in walk ("src/tests"):
    for filename in fnmatch.filter(filenames, '*.cpp'):
        name, ext = splitext(basename(filename))
        src = File("tests/" + filename)
        ut_bins.extend(ut_env.Program(target=name,
                              source=[src, ut_pav_objs],
                              LIBS=['gomp','gtest']))




#unit_tests = []
#for test in ut_bins:
#    test_bin = str(test)
#    cmd = ut_env.Command(target = test_bin + ".out",
#                            source = test_bin,
#             action = test_bin)
#    unit_tests.append(cmd)

#
